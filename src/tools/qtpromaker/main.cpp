
#include <QCoreApplication>
#include <QDebug>
#include <QDir>
#include <QDirIterator>
#include <QFile>
#include <QSet>
#include <QTextStream>
#include <QVector>

//
// Command line options
//

// Put everything into a single project.
static bool treeDepth = 0;

// FIXME: Make file classes configurable on the command line.
static const char *defaultExtensions[][2] =
{
    { "SOURCES", "cpp,c,C,cxx,c++" },
    { "HEADERS", "hpp,h,H,hxx,h++" },
    { "TRANSLATIONS", "ts" },
    { "FORMS", "ui" },
};

typedef QHash<QByteArray, QByteArray> Extensions;


class FileClass
{
public:
    FileClass() {}

    //! suffixes is a comma separated string of extensions.
    FileClass(const QByteArray &suffixes, const QString &varName)
        : m_suffixes(',' + suffixes + ','), m_varName(varName)
    {}

    static QByteArray prepareSuffix(const QByteArray &suffix)
    {
        return ',' + suffix + ',';
    }

    bool canHandle(const QByteArray &preparedSuffix) const
    {
        return m_suffixes.contains(preparedSuffix);
    }

    void addFile(const QFileInfo &fi)
    {
        m_files.insert(fi.filePath());
    }

    bool handleFile(const QFileInfo &fi, const QByteArray &preparedSuffix)
    {
        if (!canHandle(preparedSuffix))
            return false;
        addFile(fi);
        return true;
    }

    void writeProBlock(QTextStream &ts) const
    {
        ts << '\n' << m_varName << " *=";
        foreach (QString s, m_files)
            ts << " \\\n    " << s;
        ts << "\n";
    }

private:
    QByteArray m_suffixes;
    QString m_varName;
    QSet<QString> m_files;
};

class Project
{
public:
    Project() {}
    void create();
    void addPath(const QDir &dir);
    void setPaths(const QStringList &paths);
    void setOutputFileName(const QString &fileName) { m_outputFileName = fileName; }
    void writeProFile();
    void setExtensions(const Extensions &extensions);

private:
    //void addFileClass(const FileClass &fc) { m_fileClasses.append(fc); }
    void handleDir(const QDir &dir);

    QList<QDir> m_dirs;
    QVector<FileClass> m_fileClasses;
    Extensions m_extensions;
    QString m_outputFileName;
};

void Project::setPaths(const QStringList &paths)
{
    foreach (const QString &path, paths)
        addPath(QDir(path));
}

void Project::setExtensions(const Extensions &extensions)
{
    m_fileClasses.clear();
    m_extensions = extensions;
    Extensions::ConstIterator it = extensions.begin();
    for ( ; it != extensions.end(); ++it)
        m_fileClasses.append(FileClass(it.value(), it.key()));
}

void Project::addPath(const QDir &dir)
{
    m_dirs.append(dir);
}

void Project::create()
{
    for (int i = 0; i != m_dirs.size(); ++i)
        handleDir(m_dirs.at(i));
}

void Project::handleDir(const QDir &dir)
{
    QDirIterator it(dir.path());
    while (it.hasNext()) {
        it.next();
        const QFileInfo &fi = it.fileInfo();
        if (fi.isDir()) {
            if (fi.fileName() != ".." && fi.fileName() != ".")
                addPath(fi.filePath());
        } else {
            const QByteArray ext = FileClass::prepareSuffix(fi.suffix().toUtf8());
            for (int i = m_fileClasses.size(); --i >= 0; ) {
                if (m_fileClasses[i].handleFile(fi, ext))
                    break;
            }
        }
    }
}

void Project::writeProFile()
{
    QFile file(m_outputFileName);
    file.open(QIODevice::ReadWrite);
    QTextStream ts(&file);
    ts << "######################################################################\n";
    ts << "# Automatically generated by qtpromaker\n";
    ts << "######################################################################\n\n";
    ts << "TEMPLATE = app\n";
    ts << "TARGET = " << QFileInfo(m_outputFileName).baseName() << "\n";
    foreach (const FileClass &fc, m_fileClasses)
        fc.writeProBlock(ts);
    ts << "\nPATHS *=";
    foreach (const QDir &dir, m_dirs)
        ts << " \\\n    " << dir.path();
    ts << "\n\nDEPENDPATH *= $$PATHS\n";
    ts << "\nINCLUDEPATH *= $$PATHS\n";
    ts.flush();
    file.close();
}

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QStringList args = app.arguments();

    // Set up default values.
    QDir dir = QDir::currentPath();
    QString outputFileName = dir.dirName() + ".pro";
    QStringList paths;
    Extensions extensions;
    for (int i = 0; i != sizeof(defaultExtensions)/sizeof(defaultExtensions[0]); ++i)
        extensions[defaultExtensions[i][0]] = extensions[defaultExtensions[i][1]];

    // Override by command line.
    for (int i = 1, n = args.size(); i < n; ++i) {
        const QString arg = args.at(i);
        if (arg == "-h" || arg == "--help" || arg == "-help") {
            qWarning() << "Usage: " << qPrintable(args.at(0))
                << " [-o out.pro] [dir...]";
            return 1;
        }
        bool handled = true;
        if (i < n - 1) {
            if (arg == "-o" || arg == "--output" || arg == "-output")
                outputFileName = args.at(++i);
            else if (arg == "-d" || arg == "--depth" || arg == "-depth")
                treeDepth = args.at(++i).toInt();
            else
                handled = false;
        }

        // Nothing know. Treat it as path.
        if (!handled)
            paths.append(args.at(i));
    }

    if (paths.isEmpty())
        paths.append(".");

    // Run the thing.
    Project p;
    p.setExtensions(extensions);
    p.setPaths(paths);
    p.setOutputFileName(outputFileName);
    p.create();

    return 0;
}
