// This file was generated by qlalr - DO NOT EDIT!

#line 84 "./javascript.g"

/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Qt Software Information (qt-info@nokia.com)
**
** This file is part of the QtScript module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the either Technology Preview License Agreement or the
** Beta Release License Agreement.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

#include <QtCore/QtDebug>

#ifndef QT_NO_JAVASCRIPT

#include <string.h>


#include "javascriptengine_p.h"




#include "javascriptlexer_p.h"
#include "javascriptast_p.h"
#include "javascriptnodepool_p.h"

#define Q_JAVASCRIPT_UPDATE_POSITION(node, startloc, endloc) do { \
    node->startLine = startloc.startLine; \
    node->startColumn = startloc.startColumn; \
    node->endLine = endloc.endLine; \
    node->endColumn = endloc.endColumn; \
} while (0)


#line 310 "./javascript.g"


#include "javascriptparser_p.h"

//
// This file is automatically generated from javascript.g.
// Changes will be lost.
//

QT_BEGIN_NAMESPACE

inline static bool automatic(JavaScriptEnginePrivate *driver, int token)
{
    return token == JavaScriptGrammar::T_RBRACE
        || token == 0
        || driver->lexer()->prevTerminator();
}


JavaScriptParser::JavaScriptParser():
    tos(0),
    stack_size(0),
    sym_stack(0),
    state_stack(0),
    location_stack(0),
    error_lineno(0),
    error_column(0)
{
}

JavaScriptParser::~JavaScriptParser()
{
    if (stack_size) {
        qFree(sym_stack);
        qFree(state_stack);
        qFree(location_stack);
    }
}

static inline JavaScriptParser::Location location(JavaScript::Lexer *lexer)
{
    JavaScriptParser::Location loc;
    loc.startLine = lexer->startLineNo();
    loc.startColumn = lexer->startColumnNo();
    loc.endLine = lexer->endLineNo();
    loc.endColumn = lexer->endColumnNo();
    return loc;
}

bool JavaScriptParser::parse(JavaScriptEnginePrivate *driver)
{
  const int INITIAL_STATE = 0;
  JavaScript::Lexer *lexer = driver->lexer();

  int yytoken = -1;
  int saved_yytoken = -1;

  reallocateStack();

  tos = 0;
  state_stack[++tos] = INITIAL_STATE;

  while (true)
    {
      const int state = state_stack [tos];
      if (yytoken == -1 && - TERMINAL_COUNT != action_index [state])
        {
          if (saved_yytoken == -1)
            {
              yytoken = lexer->lex();
              location_stack [tos] = location(lexer);
            }
          else
            {
              yytoken = saved_yytoken;
              saved_yytoken = -1;
            }
        }

      int act = t_action (state, yytoken);

      if (act == ACCEPT_STATE)
        return true;

      else if (act > 0)
        {
          if (++tos == stack_size)
            reallocateStack();

          sym_stack [tos].dval = lexer->dval ();
          state_stack [tos] = act;
          location_stack [tos] = location(lexer);
          yytoken = -1;
        }

      else if (act < 0)
        {
          int r = - act - 1;

          tos -= rhs [r];
          act = state_stack [tos++];

          switch (r) {

#line 416 "./javascript.g"

case 0: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ThisExpression> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 424 "./javascript.g"

case 1: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::IdentifierExpression> (driver->nodePool(), sym(1).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 432 "./javascript.g"

case 2: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::NullExpression> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 440 "./javascript.g"

case 3: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::TrueLiteral> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 448 "./javascript.g"

case 4: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FalseLiteral> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 456 "./javascript.g"

case 5: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::NumericLiteral> (driver->nodePool(), sym(1).dval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 464 "./javascript.g"

case 6: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::StringLiteral> (driver->nodePool(), sym(1).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 475 "./javascript.g"

case 7: {
  bool rx = lexer->scanRegExp(JavaScript::Lexer::NoPrefix);
  if (!rx) {
      error_message = lexer->errorMessage();
      error_lineno = lexer->startLineNo();
      error_column = lexer->startColumnNo();
      return false;
  }
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::RegExpLiteral> (driver->nodePool(), lexer->pattern, lexer->flags);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 493 "./javascript.g"

case 8: {
  bool rx = lexer->scanRegExp(JavaScript::Lexer::EqualPrefix);
  if (!rx) {
      error_message = lexer->errorMessage();
      error_lineno = lexer->startLineNo();
      error_column = lexer->startColumnNo();
      return false;
  }
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::RegExpLiteral> (driver->nodePool(), lexer->pattern, lexer->flags);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 508 "./javascript.g"

case 9: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ArrayLiteral> (driver->nodePool(), sym(2).Elision);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 516 "./javascript.g"

case 10: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ArrayLiteral> (driver->nodePool(), sym(2).ElementList->finish ());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 524 "./javascript.g"

case 11: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ArrayLiteral> (driver->nodePool(), sym(2).ElementList->finish (), sym(4).Elision);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 540 "./javascript.g"

case 12: {
  if (sym(2).Node)
    sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ObjectLiteral> (driver->nodePool(), sym(2).PropertyNameAndValueList->finish ());
  else
    sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ObjectLiteral> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 551 "./javascript.g"

case 13: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ObjectLiteral> (driver->nodePool(), sym(2).PropertyNameAndValueList->finish ());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(4));
} break;

#line 559 "./javascript.g"

case 14: {
  sym(1) = sym(2);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 567 "./javascript.g"

case 15: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ElementList> (driver->nodePool(), sym(1).Elision, sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 575 "./javascript.g"

case 16: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ElementList> (driver->nodePool(), sym(1).ElementList, sym(3).Elision, sym(4).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(4));
} break;

#line 583 "./javascript.g"

case 17: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Elision> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 591 "./javascript.g"

case 18: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Elision> (driver->nodePool(), sym(1).Elision);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 599 "./javascript.g"

case 19: {
  sym(1).Node = 0;
} break;

#line 606 "./javascript.g"

case 20: {
  sym(1).Elision = sym(1).Elision->finish ();
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 614 "./javascript.g"

case 21: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::PropertyNameAndValueList> (driver->nodePool(), sym(1).PropertyName, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 622 "./javascript.g"

case 22: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::PropertyNameAndValueList> (driver->nodePool(), sym(1).PropertyNameAndValueList, sym(3).PropertyName, sym(5).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 630 "./javascript.g"

case 23: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::IdentifierPropertyName> (driver->nodePool(), sym(1).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 638 "./javascript.g"

case 24: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::StringLiteralPropertyName> (driver->nodePool(), sym(1).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 646 "./javascript.g"

case 25: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::NumericLiteralPropertyName> (driver->nodePool(), sym(1).dval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 654 "./javascript.g"

case 26: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::IdentifierPropertyName> (driver->nodePool(), sym(1).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 662 "./javascript.g"

case 27:

#line 666 "./javascript.g"

case 28:

#line 670 "./javascript.g"

case 29:

#line 674 "./javascript.g"

case 30:

#line 678 "./javascript.g"

case 31:

#line 682 "./javascript.g"

case 32:

#line 686 "./javascript.g"

case 33:

#line 690 "./javascript.g"

case 34:

#line 694 "./javascript.g"

case 35:

#line 698 "./javascript.g"

case 36:

#line 702 "./javascript.g"

case 37:

#line 706 "./javascript.g"

case 38:

#line 710 "./javascript.g"

case 39:

#line 714 "./javascript.g"

case 40:

#line 718 "./javascript.g"

case 41:

#line 722 "./javascript.g"

case 42:

#line 726 "./javascript.g"

case 43:

#line 730 "./javascript.g"

case 44:

#line 734 "./javascript.g"

case 45:

#line 738 "./javascript.g"

case 46:

#line 742 "./javascript.g"

case 47:

#line 746 "./javascript.g"

case 48:

#line 750 "./javascript.g"

case 49:

#line 754 "./javascript.g"

case 50:

#line 758 "./javascript.g"

case 51:

#line 762 "./javascript.g"

case 52:

#line 766 "./javascript.g"

case 53:

#line 770 "./javascript.g"

case 54:

#line 774 "./javascript.g"

case 55:

#line 778 "./javascript.g"

case 56:

#line 782 "./javascript.g"

case 57:
{
  sym(1).sval = driver->intern(lexer->characterBuffer(), lexer->characterCount());
} break;

#line 796 "./javascript.g"

case 62: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ArrayMemberExpression> (driver->nodePool(), sym(1).Expression, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(4));
} break;

#line 804 "./javascript.g"

case 63: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FieldMemberExpression> (driver->nodePool(), sym(1).Expression, sym(3).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(4));
} break;

#line 812 "./javascript.g"

case 64: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::NewMemberExpression> (driver->nodePool(), sym(2).Expression, sym(3).ArgumentList);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 822 "./javascript.g"

case 66: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::NewExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 830 "./javascript.g"

case 67: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::CallExpression> (driver->nodePool(), sym(1).Expression, sym(2).ArgumentList);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 838 "./javascript.g"

case 68: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::CallExpression> (driver->nodePool(), sym(1).Expression, sym(2).ArgumentList);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 846 "./javascript.g"

case 69: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ArrayMemberExpression> (driver->nodePool(), sym(1).Expression, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(4));
} break;

#line 854 "./javascript.g"

case 70: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FieldMemberExpression> (driver->nodePool(), sym(1).Expression, sym(3).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 862 "./javascript.g"

case 71: {
  sym(1).Node = 0;
} break;

#line 869 "./javascript.g"

case 72: {
  sym(1).Node = sym(2).ArgumentList->finish ();
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 877 "./javascript.g"

case 73: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ArgumentList> (driver->nodePool(), sym(1).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 885 "./javascript.g"

case 74: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ArgumentList> (driver->nodePool(), sym(1).ArgumentList, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 897 "./javascript.g"

case 78: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::PostIncrementExpression> (driver->nodePool(), sym(1).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 905 "./javascript.g"

case 79: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::PostDecrementExpression> (driver->nodePool(), sym(1).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 915 "./javascript.g"

case 81: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::DeleteExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 923 "./javascript.g"

case 82: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VoidExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 931 "./javascript.g"

case 83: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::TypeOfExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 939 "./javascript.g"

case 84: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::PreIncrementExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 947 "./javascript.g"

case 85: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::PreDecrementExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 955 "./javascript.g"

case 86: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::UnaryPlusExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 963 "./javascript.g"

case 87: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::UnaryMinusExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 971 "./javascript.g"

case 88: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::TildeExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 979 "./javascript.g"

case 89: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::NotExpression> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 989 "./javascript.g"

case 91: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Mul, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 997 "./javascript.g"

case 92: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Div, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1005 "./javascript.g"

case 93: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Mod, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1015 "./javascript.g"

case 95: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Add, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1023 "./javascript.g"

case 96: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Sub, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1033 "./javascript.g"

case 98: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::LShift, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1041 "./javascript.g"

case 99: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::RShift, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1049 "./javascript.g"

case 100: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::URShift, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1059 "./javascript.g"

case 102: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Lt, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1067 "./javascript.g"

case 103: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Gt, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1075 "./javascript.g"

case 104: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Le, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1083 "./javascript.g"

case 105: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Ge, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1091 "./javascript.g"

case 106: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::InstanceOf, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1099 "./javascript.g"

case 107: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::In, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1109 "./javascript.g"

case 109: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Lt, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1117 "./javascript.g"

case 110: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Gt, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1125 "./javascript.g"

case 111: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Le, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1133 "./javascript.g"

case 112: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Ge, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1141 "./javascript.g"

case 113: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::InstanceOf, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1151 "./javascript.g"

case 115: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Equal, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1159 "./javascript.g"

case 116: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::NotEqual, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1167 "./javascript.g"

case 117: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::StrictEqual, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1175 "./javascript.g"

case 118: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::StrictNotEqual, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1185 "./javascript.g"

case 120: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Equal, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1193 "./javascript.g"

case 121: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::NotEqual, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1201 "./javascript.g"

case 122: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::StrictEqual, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1209 "./javascript.g"

case 123: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::StrictNotEqual, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1219 "./javascript.g"

case 125: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::BitAnd, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1229 "./javascript.g"

case 127: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::BitAnd, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1239 "./javascript.g"

case 129: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::BitXor, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1249 "./javascript.g"

case 131: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::BitXor, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1259 "./javascript.g"

case 133: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::BitOr, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1269 "./javascript.g"

case 135: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::BitOr, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1279 "./javascript.g"

case 137: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::And, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1289 "./javascript.g"

case 139: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::And, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1299 "./javascript.g"

case 141: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Or, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1309 "./javascript.g"

case 143: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, QSOperator::Or, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1319 "./javascript.g"

case 145: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ConditionalExpression> (driver->nodePool(), sym(1).Expression, sym(3).Expression, sym(5).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1329 "./javascript.g"

case 147: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ConditionalExpression> (driver->nodePool(), sym(1).Expression, sym(3).Expression, sym(5).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1339 "./javascript.g"

case 149: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, sym(2).ival, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1349 "./javascript.g"

case 151: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BinaryExpression> (driver->nodePool(), sym(1).Expression, sym(2).ival, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1357 "./javascript.g"

case 152: {
  sym(1).ival = QSOperator::Assign;
} break;

#line 1364 "./javascript.g"

case 153: {
  sym(1).ival = QSOperator::InplaceMul;
} break;

#line 1371 "./javascript.g"

case 154: {
  sym(1).ival = QSOperator::InplaceDiv;
} break;

#line 1378 "./javascript.g"

case 155: {
  sym(1).ival = QSOperator::InplaceMod;
} break;

#line 1385 "./javascript.g"

case 156: {
  sym(1).ival = QSOperator::InplaceAdd;
} break;

#line 1392 "./javascript.g"

case 157: {
  sym(1).ival = QSOperator::InplaceSub;
} break;

#line 1399 "./javascript.g"

case 158: {
  sym(1).ival = QSOperator::InplaceLeftShift;
} break;

#line 1406 "./javascript.g"

case 159: {
  sym(1).ival = QSOperator::InplaceRightShift;
} break;

#line 1413 "./javascript.g"

case 160: {
  sym(1).ival = QSOperator::InplaceURightShift;
} break;

#line 1420 "./javascript.g"

case 161: {
  sym(1).ival = QSOperator::InplaceAnd;
} break;

#line 1427 "./javascript.g"

case 162: {
  sym(1).ival = QSOperator::InplaceXor;
} break;

#line 1434 "./javascript.g"

case 163: {
  sym(1).ival = QSOperator::InplaceOr;
} break;

#line 1443 "./javascript.g"

case 165: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Expression> (driver->nodePool(), sym(1).Expression, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1451 "./javascript.g"

case 166: {
  sym(1).Node = 0;
} break;

#line 1462 "./javascript.g"

case 169: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Expression> (driver->nodePool(), sym(1).Expression, sym(3).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1470 "./javascript.g"

case 170: {
  sym(1).Node = 0;
} break;

#line 1496 "./javascript.g"

case 187: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Block> (driver->nodePool(), sym(2).StatementList);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1504 "./javascript.g"

case 188: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::StatementList> (driver->nodePool(), sym(1).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1512 "./javascript.g"

case 189: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::StatementList> (driver->nodePool(), sym(1).StatementList, sym(2).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1520 "./javascript.g"

case 190: {
  sym(1).Node = 0;
} break;

#line 1527 "./javascript.g"

case 191: {
  sym(1).Node = sym(1).StatementList->finish ();
} break;

#line 1535 "./javascript.g"

case 193: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VariableStatement> (driver->nodePool(), sym(2).VariableDeclarationList->finish (/*readOnly=*/sym(1).ival == T_CONST));
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1543 "./javascript.g"

case 194: {
  sym(1).ival = T_CONST;
} break;

#line 1550 "./javascript.g"

case 195: {
  sym(1).ival = T_VAR;
} break;

#line 1557 "./javascript.g"

case 196: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VariableDeclarationList> (driver->nodePool(), sym(1).VariableDeclaration);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1565 "./javascript.g"

case 197: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VariableDeclarationList> (driver->nodePool(), sym(1).VariableDeclarationList, sym(3).VariableDeclaration);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1573 "./javascript.g"

case 198: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VariableDeclarationList> (driver->nodePool(), sym(1).VariableDeclaration);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1581 "./javascript.g"

case 199: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VariableDeclarationList> (driver->nodePool(), sym(1).VariableDeclarationList, sym(3).VariableDeclaration);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1589 "./javascript.g"

case 200: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VariableDeclaration> (driver->nodePool(), sym(1).sval, sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1597 "./javascript.g"

case 201: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::VariableDeclaration> (driver->nodePool(), sym(1).sval, sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1605 "./javascript.g"

case 202: {
  sym(1) = sym(2);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1613 "./javascript.g"

case 203: {
  sym(1).Node = 0;
} break;

#line 1622 "./javascript.g"

case 205: {
  sym(1) = sym(2);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1630 "./javascript.g"

case 206: {
  sym(1).Node = 0;
} break;

#line 1639 "./javascript.g"

case 208: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::EmptyStatement> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1648 "./javascript.g"

case 210: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ExpressionStatement> (driver->nodePool(), sym(1).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1656 "./javascript.g"

case 211: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::IfStatement> (driver->nodePool(), sym(3).Expression, sym(5).Statement, sym(7).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(7));
} break;

#line 1664 "./javascript.g"

case 212: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::IfStatement> (driver->nodePool(), sym(3).Expression, sym(5).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 1674 "./javascript.g"

case 214: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::DoWhileStatement> (driver->nodePool(), sym(2).Statement, sym(5).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(7));
} break;

#line 1682 "./javascript.g"

case 215: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::WhileStatement> (driver->nodePool(), sym(3).Expression, sym(5).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 1690 "./javascript.g"

case 216: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ForStatement> (driver->nodePool(), sym(3).Expression, sym(5).Expression, sym(7).Expression, sym(9).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(9));
} break;

#line 1698 "./javascript.g"

case 217: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::LocalForStatement> (driver->nodePool(), sym(4).VariableDeclarationList->finish (/*readOnly=*/false), sym(6).Expression, sym(8).Expression, sym(10).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(10));
} break;

#line 1706 "./javascript.g"

case 218: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ForEachStatement> (driver->nodePool(), sym(3).Expression, sym(5).Expression, sym(7).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(7));
} break;

#line 1714 "./javascript.g"

case 219: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::LocalForEachStatement> (driver->nodePool(), sym(4).VariableDeclaration, sym(6).Expression, sym(8).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(8));
} break;

#line 1723 "./javascript.g"

case 221: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ContinueStatement> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1732 "./javascript.g"

case 223: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ContinueStatement> (driver->nodePool(), sym(2).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1741 "./javascript.g"

case 225: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BreakStatement> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1750 "./javascript.g"

case 227: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::BreakStatement> (driver->nodePool(), sym(2).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1759 "./javascript.g"

case 229: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ReturnStatement> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1767 "./javascript.g"

case 230: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::WithStatement> (driver->nodePool(), sym(3).Expression, sym(5).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 1775 "./javascript.g"

case 231: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::SwitchStatement> (driver->nodePool(), sym(3).Expression, sym(5).CaseBlock);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 1783 "./javascript.g"

case 232: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::CaseBlock> (driver->nodePool(), sym(2).CaseClauses);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1791 "./javascript.g"

case 233: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::CaseBlock> (driver->nodePool(), sym(2).CaseClauses, sym(3).DefaultClause, sym(4).CaseClauses);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 1799 "./javascript.g"

case 234: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::CaseClauses> (driver->nodePool(), sym(1).CaseClause);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1807 "./javascript.g"

case 235: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::CaseClauses> (driver->nodePool(), sym(1).CaseClauses, sym(2).CaseClause);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1815 "./javascript.g"

case 236: {
  sym(1).Node = 0;
} break;

#line 1822 "./javascript.g"

case 237: {
  sym(1).Node = sym(1).CaseClauses->finish ();
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1830 "./javascript.g"

case 238: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::CaseClause> (driver->nodePool(), sym(2).Expression, sym(4).StatementList);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(4));
} break;

#line 1838 "./javascript.g"

case 239: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::DefaultClause> (driver->nodePool(), sym(3).StatementList);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1846 "./javascript.g"

case 240: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::LabelledStatement> (driver->nodePool(), sym(1).sval, sym(3).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1855 "./javascript.g"

case 242: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::ThrowStatement> (driver->nodePool(), sym(2).Expression);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1863 "./javascript.g"

case 243: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::TryStatement> (driver->nodePool(), sym(2).Statement, sym(3).Catch);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1871 "./javascript.g"

case 244: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::TryStatement> (driver->nodePool(), sym(2).Statement, sym(3).Finally);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1879 "./javascript.g"

case 245: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::TryStatement> (driver->nodePool(), sym(2).Statement, sym(3).Catch, sym(4).Finally);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(4));
} break;

#line 1887 "./javascript.g"

case 246: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Catch> (driver->nodePool(), sym(3).sval, sym(5).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(5));
} break;

#line 1895 "./javascript.g"

case 247: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Finally> (driver->nodePool(), sym(2).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 1904 "./javascript.g"

case 249: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::DebuggerStatement> (driver->nodePool());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1912 "./javascript.g"

case 250: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FunctionDeclaration> (driver->nodePool(), sym(2).sval, sym(4).FormalParameterList, sym(7).FunctionBody);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(8));
} break;

#line 1920 "./javascript.g"

case 251: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FunctionExpression> (driver->nodePool(), sym(2).sval, sym(4).FormalParameterList, sym(7).FunctionBody);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(8));
} break;

#line 1928 "./javascript.g"

case 252: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FormalParameterList> (driver->nodePool(), sym(1).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1936 "./javascript.g"

case 253: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FormalParameterList> (driver->nodePool(), sym(1).FormalParameterList, sym(3).sval);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(3));
} break;

#line 1944 "./javascript.g"

case 254: {
  sym(1).Node = 0;
} break;

#line 1951 "./javascript.g"

case 255: {
  sym(1).Node = sym(1).FormalParameterList->finish ();
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1959 "./javascript.g"

case 256: {
  sym(1).Node = 0;
} break;

#line 1968 "./javascript.g"

case 258: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FunctionBody> (driver->nodePool(), sym(1).SourceElements->finish ());
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1976 "./javascript.g"

case 259: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::Program> (driver->nodePool(), sym(1).SourceElements->finish ());
  driver->changeAbstractSyntaxTree(sym(1).Node);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1985 "./javascript.g"

case 260: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::SourceElements> (driver->nodePool(), sym(1).SourceElement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 1993 "./javascript.g"

case 261: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::SourceElements> (driver->nodePool(), sym(1).SourceElements, sym(2).SourceElement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(2));
} break;

#line 2001 "./javascript.g"

case 262: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::StatementSourceElement> (driver->nodePool(), sym(1).Statement);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 2009 "./javascript.g"

case 263: {
  sym(1).Node = JavaScript::makeAstNode<JavaScript::AST::FunctionSourceElement> (driver->nodePool(), sym(1).FunctionDeclaration);
  Q_JAVASCRIPT_UPDATE_POSITION(sym(1).Node, loc(1), loc(1));
} break;

#line 2017 "./javascript.g"

case 264: {
  sym(1).sval = 0;
} break;

#line 2026 "./javascript.g"

case 266: {
  sym(1).Node = 0;
} break;

#line 2034 "./javascript.g"

          } // switch

          state_stack [tos] = nt_action (act, lhs [r] - TERMINAL_COUNT);

          if (rhs[r] > 1) {
              location_stack[tos - 1].endLine = location_stack[tos + rhs[r] - 2].endLine;
              location_stack[tos - 1].endColumn = location_stack[tos + rhs[r] - 2].endColumn;
              location_stack[tos] = location_stack[tos + rhs[r] - 1];
          }
        }

      else
        {
          if (saved_yytoken == -1 && automatic (driver, yytoken) && t_action (state, T_AUTOMATIC_SEMICOLON) > 0)
            {
              saved_yytoken = yytoken;
              yytoken = T_SEMICOLON;
              continue;
            }

          else if ((state == INITIAL_STATE) && (yytoken == 0)) {
              // accept empty input
              yytoken = T_SEMICOLON;
              continue;
          }

          int ers = state;
          int shifts = 0;
          int reduces = 0;
          int expected_tokens [3];
          for (int tk = 0; tk < TERMINAL_COUNT; ++tk)
            {
              int k = t_action (ers, tk);

              if (! k)
                continue;
              else if (k < 0)
                ++reduces;
              else if (spell [tk])
                {
                  if (shifts < 3)
                    expected_tokens [shifts] = tk;
                  ++shifts;
                }
            }

          error_message.clear ();
          if (shifts && shifts < 3)
            {
              bool first = true;

              for (int s = 0; s < shifts; ++s)
                {
                  if (first)
                    error_message += QLatin1String ("Expected ");
                  else
                    error_message += QLatin1String (", ");

                  first = false;
                  error_message += QLatin1String("`");
                  error_message += QLatin1String (spell [expected_tokens [s]]);
                  error_message += QLatin1String("'");
                }
            }

          if (error_message.isEmpty())
              error_message = lexer->errorMessage();

          error_lineno = lexer->startLineNo();
          error_column = lexer->startColumnNo();

          return false;
        }
    }

    return false;
}

QT_END_NAMESPACE

#endif // QT_NO_JAVASCRIPT
